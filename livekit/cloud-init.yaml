#cloud-config
# This file is used as a user-data script to start a VM
# It'll upload configs to the right location and install LiveKit as a systemd service
# LiveKit will be started automatically at machine startup
package_update: true
package_upgrade: all

# API Key And Secret - just replace with values from any LK Cloud Project and you will be good! or generate one
# Both subdomains must be an A record pointing to your IP

packages:
  - docker.io
  - python3
  - python3-venv
  - python3-pip
  - git
  - nano
  - curl

bootcmd:
  - mkdir -p /opt/livekit/caddy_data
  - mkdir -p /usr/local/bin

write_files:
  - path: /opt/livekit/livekit.yaml
    content: |
      port: 7880
      bind_addresses:
          - ""
      rtc:
          tcp_port: 7881
          port_range_start: 50000
          port_range_end: 60000
          use_external_ip: true
          enable_loopback_candidate: false
      redis:
          address: localhost:6379
          username: ""
          password: ""
          db: 0
          use_tls: false
          sentinel_master_name: ""
          sentinel_username: ""
          sentinel_password: ""
          sentinel_addresses: []
          cluster_addresses: []
          max_redirects: null
      turn:
          enabled: true
          domain: livekit-turn.example.com
          tls_port: 5349
          udp_port: 3478
          external_tls: true
      keys:
          APIKEYXXXXXXXXXX: SECRETKEYXXXXXXXXXXXXXXXXXXX

  - path: /opt/livekit/egress.yaml
    content: |
      api_key: "APIKEYXXXXXXXXXX"
      api_secret: "SECRETKEYXXXXXXXXXXXXXXXXXXX"
      ws_url: ws://localhost:7880
      insecure: true  # because we're just using ws://
      redis:
        address: localhost:6379
      log_level: debug

  - path: /opt/livekit/caddy.yaml
    content: |
      logging:
        logs:
          default:
            level: INFO
      storage:
        "module": "file_system"
        "root": "/data"
      apps:
        tls:
          certificates:
            automate:
              - livekit.example.com
              - livekit-turn.example.com
        layer4:
          servers:
            main:
              listen: [":443"]
              routes:
                - match:
                  - tls:
                      sni:
                        - "livekit-turn.example.com"
                  handle:
                    - handler: tls
                    - handler: proxy
                      upstreams:
                        - dial: ["localhost:5349"]
                - match:
                    - tls:
                        sni:
                          - "livekit.example.com"
                  handle:
                    - handler: tls
                      connection_policies:
                        - alpn: ["http/1.1"]
                    - handler: proxy
                      upstreams:
                        - dial: ["localhost:7880"]

  - path: /opt/livekit/update_ip.sh
    content: |
      #!/usr/bin/env bash
      ip=`ip addr show |grep "inet " |grep -v 127.0.0. |head -1|cut -d" " -f6|cut -d/ -f1`
      sed -i.orig -r "s/\\\"(.+)(\:5349)/\\\"$ip\2/" /opt/livekit/caddy.yaml

  - path: /opt/livekit/docker-compose.yaml
    content: |
      # This docker-compose requires host networking, which is only available on Linux
      # This compose will not function correctly on Mac or Windows
      services:
        caddy:
          image: livekit/caddyl4
          command: run --config /etc/caddy.yaml --adapter yaml
          restart: unless-stopped
          network_mode: "host"
          volumes:
            - ./caddy.yaml:/etc/caddy.yaml
            - ./caddy_data:/data
        livekit:
          image: livekit/livekit-server:latest
          command: --config /etc/livekit.yaml
          restart: unless-stopped
          network_mode: "host"
          volumes:
            - ./livekit.yaml:/etc/livekit.yaml
        redis:
          image: redis:7-alpine
          command: redis-server /etc/redis.conf
          restart: unless-stopped
          network_mode: "host"
          volumes:
            - ./redis.conf:/etc/redis.conf
            - ./redis_data:/data
        sip:
          image: livekit/sip:latest
          network_mode: host
          environment:
            SIP_CONFIG_BODY: |
              api_key: 'APIKEYXXXXXXXXXX'
              api_secret: 'SECRETKEYXXXXXXXXXXXXXXXXXXX'
              ws_url: 'ws://localhost:7880'
              redis:
                address: 'localhost:6379'
              sip_port: 5060
              rtp_port: 10000-20000
              use_external_ip: true
              logging:
                level: debug
        egress:
          image: livekit/egress:latest
          network_mode: "host"
          restart: unless-stopped
          # needed for Chrome sandboxing in the container
          cap_add:
            - SYS_ADMIN
          environment:
            # Tells the egress image where to read its .yaml configuration
            EGRESS_CONFIG_FILE: /etc/egress.yaml
          volumes:
            - ./egress.yaml:/etc/egress.yaml

  - path: /etc/systemd/system/livekit-docker.service
    content: |
      [Unit]
      Description=LiveKit Server Container
      After=docker.service
      Requires=docker.service

      [Service]
      LimitNOFILE=500000
      Restart=always
      WorkingDirectory=/opt/livekit
      # Shutdown container (if running) when unit is started
      ExecStartPre=/usr/local/bin/docker-compose -f docker-compose.yaml down
      ExecStart=/usr/local/bin/docker-compose -f docker-compose.yaml up
      ExecStop=/usr/local/bin/docker-compose -f docker-compose.yaml down

      [Install]
      WantedBy=multi-user.target

  - path: /opt/livekit/redis.conf
    content: |
      bind 127.0.0.1 ::1
      protected-mode yes
      port 6379
      timeout 0
      tcp-keepalive 300

runcmd:
  # ---- Then your iptables rules (run them after docker etc. if you like):
  - iptables -I INPUT 1 -p tcp --dport 443 -j ACCEPT
  - iptables -I INPUT 1 -p tcp --dport 5349 -j ACCEPT
  - iptables -I INPUT 1 -p tcp --dport 7880 -j ACCEPT
  - iptables -I INPUT 1 -p tcp --dport 7881 -j ACCEPT
  - iptables -I INPUT 1 -p udp --dport 3478 -j ACCEPT
  - iptables -I INPUT 1 -p udp --dport 50000:60000 -j ACCEPT
  - iptables -I INPUT 1 -p udp --dport 5060 -j ACCEPT
  - iptables -I INPUT 1 -p udp --dport 10000:20000 -j ACCEPT

  # ---- Save them so they persist after reboot:
  - netfilter-persistent save

  - curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod 755 /usr/local/bin/docker-compose
  - chmod 755 /opt/livekit/update_ip.sh
  - /opt/livekit/update_ip.sh
  - systemctl enable livekit-docker
  - systemctl start livekit-docker
